#!/usr/bin/env python2
"""Check coverage and compare against another version."""

from __future__ import division
from __future__ import print_function
import argparse
import sys

from easycov.coverage import Coverage
from easycov.coverage import relative_filename

def _get_args():
  parser = argparse.ArgumentParser(
      description='Process coverage.')
  parser.add_argument(
      '--lcov', metavar='LCOV_FILE',
      type=argparse.FileType('r'), nargs='+',
      action='append', default=[],
      help='add lcov file(s) to coverage')
  parser.add_argument(
      '--xml', metavar='XML_FILE',
      type=argparse.FileType('r'), nargs='+',
      action='append', default=[],
      help='add cobertura xml file(s) to coverage')
  parser.add_argument(
      '--root_dir', metavar='PATH',
      type=str,
      default=None,
      help='root dir of the source code')
  parser.add_argument(
      '--annotate',
      action='store_true',
      help="Annotate all files coverage information")
  return parser.parse_args()

def main():
  """Run easycov."""
  args = _get_args()
  total_coverage = Coverage()
  for lcovs in args.lcov:
    for lcov in lcovs:
      total_coverage += Coverage.from_lcov_file(lcov, args.root_dir)
  for xmls in args.xml:
    for xml in xmls:
      total_coverage += Coverage.from_xml_file(xml, args.root_dir)
  if args.annotate:
    coverage = total_coverage.get_coverage()
    for filename in coverage.keys():
      if not coverage[filename]:
        continue
      file_coverage = coverage[filename]
      with open(relative_filename(filename, args.root_dir)) as lines:
        new_lines = []
        for line_number, line in enumerate(lines):
          # Add 1 because line numbers in files traditionally start at 1.
          if line_number+1 in file_coverage:
            new_lines.append("%3d %s" %
                             (float(file_coverage[line_number+1])*100,
                              line))
          else:
            new_lines.append("    " + line)
      with open(relative_filename(filename, args.root_dir), 'w') as new_file:
        new_file.write("".join(new_lines))
  else:
    sys.stdout.write(total_coverage.to_binary())

if __name__ == '__main__':
  main()
